name: CI
on:
  push:
    branches:
      - master
  # pull_request:
  #   branches:
  #     - master
jobs:
  # build_web:
  #   name: Build Flutter (Web)
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: subosito/flutter-action@v2
  #     with:
  #       channel: 'stable'
  #   - run: flutter --version
  #   - run: flutter pub get
  #   - run: flutter config --enable-web
  #   - run: flutter build web
  #   - name: Archive Production Artifact
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: web-build
  #       path: build/web
  # build_ios:
  #   name: Build Flutter (iOS)
  #   runs-on: macOS-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: subosito/flutter-action@v2
  #     with:
  #       channel: 'stable'
  #   - run: flutter --version
  #   - run: flutter clean
  #   - run: flutter pub get
  #   - run:  flutter build ios --release --no-codesign
  #   - name: using profile
  #     run : |
  #       echo -n "$PROVISION_PROFILE_PROD" | base64 --decode > /tmp/build_pp.mobileprovision
  #       mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
  #       cp /tmp/build_pp.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles
  #   - name: Export IPA
  #     run: |
  #       cd ios
  #       xcodebuild -workspace Runner.xcworkspace -scheme Runner -sdk iphoneos -configuration Release archive -archivePath $PWD/build/Runner.xcarchive
  #       xcodebuild -exportArchive -archivePath $PWD/build/Runner.xcarchive -exportOptionsPlist ExportOptions.plist -exportPath $PWD/build/Runner.ipa
  #   - name: Rename IPA
  #     run: mv ios/build/Runner.ipa/Runner.ipa ./ExampleApp-SNAPSHOT.ipa
  #   - name: Archive IPA
  #     uses: actions/upload-artifact@v1
  #     with:
  #       name: ios-build
  #       path: ./ExampleApp-SNAPSHOT.ipa
  #   - name: Upload iPA
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: ios-build
  #       path: build/ios/iphoneos
  # build_apk:
  #   name: Build Flutter (Android)
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: subosito/flutter-action@v2
  #     with:
  #       channel: 'stable'
  #   - run: flutter --version
  #   - run: flutter pub get
  #   - run: flutter build apk
  #   - name: Upload APK
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: apk-build
  #       path: build/app/outputs/apk/release
  # deploy_web:
  #   name: Deploy Web to Firebase Hosting
  #   needs: build_web
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repo
  #       uses: actions/checkout@master
  #     - name: Download Artifact
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: web-build
  #         path: web-build
  #     - name: Deploy to Firebase
  #       uses: w9jds/firebase-action@master
  #       with:
  #         args: deploy --only hosting --public web-build
  #       env:
  #         FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
  #         PROJECT_ID: default
#   deploy_ios:
#     name: Deploy iOS Beta
#     needs: [build_ios]
#     runs-on: macOS-latest
#     steps:
#       - uses: actions/checkout@v1
#       - uses: subosito/flutter-action@v1
#         with:
#           channel: 'dev'
#       - run:  mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
#       - uses: webfactory/ssh-agent@v0.1.1
#         with:
#           ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
#       - uses: maierj/fastlane-action@v0.9.5
#         with:
#           lane: 'beta'
#           subdirectory: 'ios'
#         env:
#           GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
#   deploy_apk:
#     name: Deploy Android Beta
#     needs: [build_apk]
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v1
#       - uses: actions/setup-java@v1
#         with:
#           java-version: '12.x'
#       - uses: subosito/flutter-action@v1
#         with:
#           channel: 'dev'
#       - uses: maierj/fastlane-action@v0.9.5
#         with:
#           lane: 'beta'
#           subdirectory: 'android'
#         env:
#           GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # beta_ios:
  #   name: Upload iOS Beta to Firebase App Distribution
  #   needs: [build_ios]
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: set up JDK 1.8
  #     uses: actions/setup-java@v3
  #     with:
  #       distribution: 'zulu'
  #       java-version: "12.x"
  #       cache: 'gradle'
  #   - name: Download Artifact
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: ios-build
  #   - name: Upload IPA
  #     uses: wzieba/Firebase-Distribution-Github-Action@v1.6.0
  #     with:
  #       appId: ${{secrets.FIREBASE_IOS_APPID}}
  #       serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
  #       groups: testers
  #       file: Runner.ipa
  # beta_apk:
  #   name: Upload Android Beta to Firebase App Distribution
  #   needs: [build_apk]
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: set up JDK 1.8
  #     uses: actions/setup-java@v3
  #     with:
  #       distribution: 'zulu'
  #       java-version: "12.x"
  #       cache: 'gradle'
  #   - name: Download Artifact
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: apk-build
  #   - name: Upload APK
  #     uses: wzieba/Firebase-Distribution-Github-Action@v1.6.0
  #     with:
  #       appId: ${{secrets.FIREBASE_ANDROID_APPID}}
  #       serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
  #       groups: testers
  #       file: app-release.apk
    




  build:
    runs-on: macos-latest
    steps:
      # Checks-out our repository under $GITHUB_WORKSPACE, so our job can access it
      - name: Checkout repository
        uses: actions/checkout@v2

      # Install the Apple certificate and provisioning profile 
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      # Install flutter
      - name: Flutter get
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # Install your project's dependencies
      - run: flutter pub get
      # - run: flutter build ios --release --no-codesign

      # - name: Export IPA
      #   run: |
      #     cd ios
      #     xcodebuild -workspace Runner.xcworkspace -scheme Runner -sdk iphoneos -configuration Release archive -archivePath $PWD/build/Runner.xcarchive
      #     xcodebuild -exportArchive -archivePath $PWD/build/Runner.xcarchive -exportOptionsPlist ExportOptions.plist -exportPath $PWD/build/Runner.ipa
      # - name: Rename IPA
      #   run: mv ios/build/Runner.ipa/Runner.ipa ./ExampleApp-SNAPSHOT.ipa
      # - name: Archive IPA
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: ios-build
      #     path: ./ExampleApp-SNAPSHOT.ipa
      # - name: Upload iPA
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: ios-build
      #     path: build/ios/iphoneos

      # Build and sign the ipa using a single flutter command
      - name: Building IPA
        run: flutter build ipa --release --export-options-plist=ios/Runner/ExportOptions.plist
          
      # Collect the file and upload as artifact         
      - name: collect ipa artifacts
        uses: actions/upload-artifact@v2
        with:
          name: release-ipa
          # Path to the release files
          path: build/ios/ipa/*.ipa

      # Important! Cleanup: remove the certificate and provisioning profile from the runner!
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
  # Release job, upload the ipa to Firebase App Distribution
  release:
    name: Release ipa to Firebase
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
    
    # Retrieve ipa file from GitHub artifacts
    - uses: actions/checkout@v2
    - name: Get release-ipa from artifacts
      uses: actions/download-artifact@v2
      with:
        name: ios-build

    # Upload ipa file to Fiebase
    - name: Upload artifact to Firebase App Distribution
      uses: wzieba/Firebase-Distribution-Github-Action@v1
      with:
        appId: ${{secrets.FIREBASE_IOS_APPID}}
        serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
        groups: testers
        file: Runner.ipa